Theodore Wu, Charlie Liu, Alexa Daigle, Espie Taylor
Assignment 4 
Parallel Programming 
03/29/24 

Total execution time for each run:
----------------------------------
A.) 1 node, 1 GPU, 16Kx16K world size each MPI rank, 128 iterations with 256 CUDA thread block size and pattern 5: 
B.) 1 node, 2 GPUs/MPI ranks, 16Kx16K world size each MPI rank, 128 iterations with 256 CUDA thread block size and pattern 5:
C.) 1 node, 3 GPUs/MPI ranks, 16Kx16K world size each MPI rank, 128 iterations with 256 CUDA thread block size and pattern 5: 
D.) 1 node, 4 GPUs/MPI ranks, 16Kx16K world size each MPI rank, 128 iterations with 256 CUDA thread block size and pattern 5: 
E.) 1 node, 5 GPUs/MPI ranks, 16Kx16K world size each MPI rank, 128 iterations with 256 CUDA thread block size and pattern 5: 
F.) 1 node, 6 GPUs/MPI ranks, 16Kx16K world size each MPI rank, 128 iterations with 256 CUDA thread block size and pattern 5: 
G.) 2 nodes, 12 GPUs/MPI ranks, 16Kx16K world size each MPI rank, 128 iterations with 256 CUDA thread block size and pattern 5: 

Maximum speedup relative to using a single GPU:
-----------------------------------------------
Time with single GPU: 
Speedup with 2:
Speedup with 3: 
Speedup with 4: 
Speedup with 5:
Speedup with 6:
Speedup with 12:
Maximum speedup:

Configuration that yields the fastest "cells updates per second" rate:
----------------------------------------------------------------------
A.) World of 16384^2 that runs for 128 iterations with - execution time: 
    16384^2 * 128 = 34359738368 cell updates
    34359738368 / x = y cell updates per second
B.) World of 16384^2 that runs for 128 iterations with - execution time: 
    16384^2 * 128 = 34359738368 cell updates
    34359738368 / x = y cell updates per second
C.) World of 16384^2 that runs for 128 iterations with - execution time:
    16384^2 * 128 = 34359738368 cell updates
    34359738368 / x = y cell updates per second
D.) World of 16384^2 that runs for 128 iterations with - execution time: 
    16384^2 * 128 = 34359738368 cell updates
    34359738368 / x = y cell updates per second
E.) World of 16384^2 that runs for 128 iterations with - execution time: 
    16384^2 * 128 = 34359738368 cell updates
    34359738368 / x = y cell updates per second
F.) World of 16384^2 that runs for 128 iterations with - execution time: 
    16384^2 * 128 = 34359738368 cell updates
    34359738368 / x = y cell updates per second
G.) World of 16384^2 that runs for 128 iterations with - execution time:
    16384^2 * 128 = 34359738368 cell updates
    34359738368 / x = y cell updates per second
Fastest "cells updates per second" rate: 

Why this configuration was faster than others:
----------------------------------------------

Contributions:
--------------
All group members engaged in a collaborative effort to review and test the C and CUDA code to ensure correctness. Additionally, all group members effectively communicated with one another in regard to dividing up work and completing various tasks in a timely manner. 
Other individual contributions: 
Theodore Wu: Corrections and bug fixes in code
Charlie Liu: C and CUDA code 
Alexa Daigle: Report and calculations 
Espie Taylor: AIMOS runs 

